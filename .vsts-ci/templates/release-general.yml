steps:
- download: current
  displayName: Download unsigned pipeline artifacts

- task: ExtractFiles@1
  displayName: Extract unsigned artifacts
  inputs:
    archiveFilePatterns: $(Pipeline.Workspace)/GraphicalTools-Build-*/GraphicalTools-Build.zip
    destinationFolder: $(Pipeline.Workspace)/Unsigned
    cleanDestinationFolder: true

- checkout: ComplianceRepo

# NOTE: The signing templates explicitly copy everything along as they run, so
# the last output path has every signed (and intentionally unsigned) file.
- template: EsrpSign.yml@ComplianceRepo
  parameters:
    buildOutputPath: $(Pipeline.Workspace)/Unsigned
    signOutputPath: $(Pipeline.Workspace)/FirstPartySigned
    alwaysCopy: true
    certificateId: CP-230012 # Authenticode certificate
    shouldSign: true # We always want to sign
    useMinimatch: true # This enables the use of globbing
    pattern: |
      **/Microsoft.PowerShell.*.{dll,psd1,psm1}

- template: EsrpSign.yml@ComplianceRepo
  parameters:
    buildOutputPath: $(Pipeline.Workspace)/FirstPartySigned
    signOutputPath: $(Pipeline.Workspace)/ThirdPartySigned
    alwaysCopy: true
    certificateId: CP-231522 # Third-party certificate
    shouldSign: true # We always want to sign
    useMinimatch: true # This enables the use of globbing
    pattern: |
      **/NStack.dll
      **/Terminal.Gui.dll

# The SBOM generation requires our original sources with the `dotnet restore`
# produced `project.assets.json` files.
- task: ExtractFiles@1
  displayName: Extract source artifacts
  inputs:
    archiveFilePatterns: $(Pipeline.Workspace)/GraphicalTools-Sources-*/GraphicalTools-Sources.zip
    destinationFolder: $(Pipeline.Workspace)/Sources
    cleanDestinationFolder: true

- template: Sbom.yml@ComplianceRepo
  parameters:
    BuildDropPath: $(Pipeline.Workspace)/ThirdPartySigned
    Build_Repository_Uri: https://github.com/PowerShell/GraphicalTools.git
    packageName: GraphicalTools
    packageVersion: $(System.JobId)
    sourceScanPath: $(Pipeline.Workspace)/Sources

- task: ArchiveFiles@2
  displayName: Zip signed artifacts
  inputs:
    rootFolderOrFile: $(Pipeline.Workspace)/ThirdPartySigned
    includeRootFolder: false
    archiveType: zip
    archiveFile: GraphicalTools.zip
    replaceExistingArchive: true
    verbose: true

- checkout: self

- template: assembly-module-compliance.yml@ComplianceRepo
  parameters:
    # binskim
    AnalyzeTarget: $(Pipeline.Workspace)/*.dll
    AnalyzeSymPath: 'SRV*'
    # component-governance: requires the `project.assets.json` files
    sourceScanPath: $(Pipeline.Workspace)/Sources
    # credscan
    suppressionsFile: ''
    # TermCheck AKA PoliCheck
    targetArgument: $(Build.SourcesDirectory)/GraphicalTools
    optionsUEPATH: $(Build.SourcesDirectory)/GraphicalTools/tools/terms/UserExclusions.xml
    optionsRulesDBPath: ''
    optionsFTPath: $(Build.SourcesDirectory)/GraphicalTools/tools/terms/FileTypeSet.xml
    # tsa-upload
    codeBaseName: PowerShell_GraphicalTools_20220823
    # We don't use any Windows APIs directly, so we don't need API scan
    APIScan: false

- publish: GraphicalTools.zip
  artifact: GraphicalTools
  displayName: Publish signed pipeline artifacts
